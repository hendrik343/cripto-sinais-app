from flask import Flask, request, jsonify, redirect
import stripe
import os
import firebase_admin
from firebase_admin import credentials, firestore

app = Flask(__name__)

# üîê Stripe API Key (usa a tua chave secreta aqui)
stripe.api_key = 'sk_test_TUA_CHAVE_SECRETA_AQUI'

# ‚úÖ Firebase Admin Init
cred = credentials.Certificate("firebase-service-account.json")  # Baixa do Firebase Console
firebase_admin.initialize_app(cred)
db = firestore.client()

# ‚úÖ Criar sess√£o de pagamento Stripe
@app.route('/create-checkout-session', methods=['POST'])
def create_checkout_session():
    data = request.get_json()
    uid = data.get('uid')
    if not uid:
        return jsonify({"error": "UID obrigat√≥rio"}), 400

    try:
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            mode='payment',
            customer_email=data.get('email'),
            line_items=[{
                'price_data': {
                    'currency': 'eur',
                    'product_data': {
                        'name': 'Plano VIP CriptoSinais'
                    },
                    'unit_amount': 490,  # ‚Ç¨4.90
                },
                'quantity': 1,
            }],
            metadata={"uid": uid},
            success_url='https://cripto-sinais.app/sucesso',
            cancel_url='https://cripto-sinais.app/cancelado',
        )
        return jsonify({"url": session.url})
    except Exception as e:
        return jsonify(error=str(e)), 500

# ‚úÖ Webhook do Stripe para atualizar Firestore ap√≥s pagamento
@app.route('/stripe-webhook', methods=['POST'])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get('stripe-signature')
    endpoint_secret = 'whsec_TUA_ASSINATURA_DO_WEBHOOK'

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except Exception as e:
        return jsonify({'error': str(e)}), 400

    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        uid = session['metadata']['uid']
        user_ref = db.collection('users').document(uid)
        user_ref.update({'vip': True})

    return jsonify({'status': 'success'}), 200

if __name__ == '__main__':
    app.run(port=5000, debug=True)