import time
import requests
from statistics import mean
from telegram import Bot
from datetime import datetime

# Telegram
TELEGRAM_TOKEN = "SEU_TOKEN_AQUI"
TELEGRAM_CHAT_ID = "SEU_CHAT_ID_AQUI"
bot = Bot(token=TELEGRAM_TOKEN)

# API CoinGecko
COIN_GECKO_URL = "https://api.coingecko.com/api/v3"
MOEDAS = [
    "shiba-inu", "pepe", "floki", "dogecoin", "solana", "ripple", "cardano",
    "avalanche-2", "chainlink", "bitcoin", "ethereum", "aptos", "arbitrum",
    "optimism", "sei-network", "the-graph", "internet-computer", "strike"
]

def get_market_data(coin_id):
    url = f"{COIN_GECKO_URL}/coins/{coin_id}/market_chart"
    params = {
        "vs_currency": "usd",
        "days": "1",
        "interval": "hourly"
    }
    response = requests.get(url, params=params)
    data = response.json()
    return data

def calculate_rsi(prices, period=14):
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d if d > 0 else 0 for d in deltas]
    losses = [-d if d < 0 else 0 for d in deltas]

    avg_gain = mean(gains[:period])
    avg_loss = mean(losses[:period])
    rsi = []

    for i in range(period, len(prices) - 1):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
        rs = avg_gain / avg_loss if avg_loss != 0 else 0
        rsi.append(100 - (100 / (1 + rs)))

    return rsi[-1] if rsi else None

def send_alert(coin, rsi, last_price):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    message = f"""ðŸš€ *PUMP DETECTADO EM {coin.upper()}*
ðŸ“Š RSI: {rsi:.2f}
ðŸ“ˆ Cruzamento MA7 > MA25
ðŸ’° Volume: acima da mÃ©dia
ðŸ“… Hora: {now}

âš¡ _TendÃªncia de valorizaÃ§Ã£o em preparaÃ§Ã£o!_
"""
    bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')

def monitorar():
    while True:
        for moeda in MOEDAS:
            try:
                data = get_market_data(moeda)
                prices = [x[1] for x in data["prices"]][-30:]
                volumes = [x[1] for x in data["total_volumes"]][-30:]

                if len(prices) < 25:
                    continue

                ma7 = mean(prices[-7:])
                ma25 = mean(prices[-25:])
                rsi = calculate_rsi(prices)
                volume_medio = mean(volumes[-6:-1])
                volume_atual = volumes[-1]

                if (
                    rsi is not None and rsi < 35 and
                    ma7 > ma25 and
                    volume_atual > 1.3 * volume_medio
                ):
                    send_alert(moeda, rsi, prices[-1])

            except Exception as e:
                print(f"Erro com {moeda}: {e}")

        time.sleep(300)  # Espera 5 minutos

if __name__ == "__main__":
    monitorar()